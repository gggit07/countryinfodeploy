{"version":3,"file":"static/js/927.eeac0607.chunk.js","mappings":"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","sources":["components/CountryDetails.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport API from \"../api\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchCountries } from \"../actions\";\n\nconst CountryDetails = () => {\n  const [country, setCountry] = useState({});\n  const [nativeName, setNativeName] = useState(\"\");\n  const [borderCountries, setBorderCountries] = useState([]);\n\n  const dispatch = useDispatch();\n  const { countries } = useSelector((state) => state.countries);\n\n  const navigate = useNavigate();\n  const { cca2 } = useParams();\n\n  useEffect(() => {\n    dispatch(fetchCountries());\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const getCountry = async () => {\n      const { data } = await API.get(`/alpha/${cca2}`);\n\n      setCountry(data[0]);\n      const nn = Object.values(data[0].name.nativeName)[0];\n      setNativeName(nn.common);\n      const arr = Object.keys(data[0]);\n\n      if (arr.includes(\"borders\")) {\n        const bcList = Object.values(data[0]?.borders);\n        const bc = countries.filter((c) => bcList.includes(c.cca3));\n        setBorderCountries(bc);\n      }\n    };\n\n    getCountry();\n  }, [cca2, countries]);\n\n  return (\n    <main className=\"country-main main-bg\">\n      <Container>\n        <Row className=\"between-center relative-z-1\">\n          <Col md={5}>\n            <button className=\"to-back-btn\" onClick={() => navigate(-1)}>\n              <i className=\"fa-solid fa-arrow-left-long\"></i>\n              <span className=\"to-back-btn-text\">Back</span>\n            </button>\n          </Col>\n        </Row>\n        {Object.keys(country).length > 0 && (\n          <Row className=\"mt-5\">\n            <Col md={5}>\n              <div\n                className=\"country-img-box\"\n                style={{ backgroundImage: `url(${country.flags.svg})` }}\n              ></div>\n            </Col>\n            <Col md={7}>\n              <div className=\"country-text-wrapper\">\n                <h2 className=\"country-name\">{country.name.common}</h2>\n                <div className=\"country-info-wrapper\">\n                  <Row>\n                    <Col>\n                      <p>\n                        <span className=\"prop\">Native Name:</span>\n                        {nativeName}\n                      </p>\n                      <p>\n                        <span className=\"prop\">Papulation:</span>\n                        {country.population}\n                      </p>\n                      <p>\n                        <span className=\"prop\">Region:</span>\n                        {country.region}\n                      </p>\n                      <p>\n                        <span className=\"prop\">Sub Region:</span>\n                        {country.subregion}\n                      </p>\n                      <p>\n                        <span className=\"prop\">Capital:</span>\n                        {country.capital}\n                      </p>\n                    </Col>\n                    <Col>\n                      <p>\n                        <span className=\"prop\">Top Level Domain:</span>\n                        {country.tld}\n                      </p>\n                      <p>\n                        <span className=\"prop\">Currencies:</span>\n                        {Object.values(country.currencies).map((c, i, arr) => (\n                          <span key={c.name}>\n                            {c.name}\n                            {i + 1 === arr.length ? \"\" : \", \"}\n                          </span>\n                        ))}\n                      </p>\n                      <p>\n                        <span className=\"prop\">Languages:</span>\n                        {Object.values(country.languages).map((l, i, arr) => (\n                          <span key={l}>\n                            {l}\n                            {i + 1 === arr.length ? \"\" : \", \"}\n                          </span>\n                        ))}\n                      </p>\n                    </Col>\n                  </Row>\n                </div>\n                <div className=\"border-countries\">\n                  <span className=\"prop\">Border Countries:</span>\n                  <ul className=\"border-list\">\n                    {Boolean(borderCountries.length) &&\n                      borderCountries.map((bc) => (\n                        <li key={bc.cioc}>{bc.name.common}</li>\n                      ))}\n                  </ul>\n                </div>\n              </div>\n            </Col>\n          </Row>\n        )}\n      </Container>\n    </main>\n  );\n};\n\nexport default CountryDetails;\n"],"names":["_useState","useState","_useState2","_slicedToArray","country","setCountry","_useState3","_useState4","nativeName","setNativeName","_useState5","_useState6","borderCountries","setBorderCountries","dispatch","useDispatch","countries","useSelector","state","navigate","useNavigate","cca2","useParams","useEffect","fetchCountries","getCountry","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$API$get","data","nn","_data$","bcList","bc","wrap","_context","prev","next","API","concat","sent","Object","values","name","common","keys","includes","borders","filter","c","cca3","stop","apply","arguments","_jsx","className","children","_jsxs","Container","Row","Col","md","onClick","length","style","backgroundImage","flags","svg","population","region","subregion","capital","tld","currencies","map","i","arr","languages","l","Boolean","cioc"],"sourceRoot":""}